// $primaryFont: 'Noyh Geometric', 'Gill Sans', 'Gill Sans MT', Calibri,
// 	'Trebuchet MS', sans-serif;

@font-face {
	font-family: 'Cera Pro';
	font-weight: 300;
	font-style: normal;
	font-display: swap;
	unicode-range: U+000-5FF;
	src: local('Cera Pro'), url('/fonts/cerapro-light.woff2') format('woff2'),
		url('/fonts/cerapro-light.woff') format('woff');
}
@font-face {
	font-family: 'Cera Pro';
	font-weight: 400;
	font-style: normal;
	font-display: swap;
	unicode-range: U+000-5FF;
	src: local('Cera Pro'), url('/fonts/cerapro-regular.woff2') format('woff2'),
		url('/fonts/cerapro-regular.woff') format('woff');
}
@font-face {
	font-family: 'Cera Pro';
	font-weight: 500;
	font-style: normal;
	font-display: swap;
	unicode-range: U+000-5FF;
	src: local('Cera Pro'), url('/fonts/cerapro-medium.woff2') format('woff2'),
		url('/fonts/cerapro-medium.woff') format('woff');
}

@font-face {
	font-family: 'Cera Pro';
	font-weight: 600;
	font-style: normal;
	font-display: swap;
	unicode-range: U+000-5FF;
	src: local('Cera Pro'), url('/fonts/cerapro-bold.woff2') format('woff2'),
		url('/fonts/cerapro-bold.woff') format('woff');
}
@font-face {
	font-family: 'Cera Pro';
	font-weight: 900;
	font-style: normal;
	font-display: swap;
	unicode-range: U+000-5FF;
	src: local('Cera Pro'), url('/fonts/cerapro-black.woff2') format('woff2'),
		url('/fonts/cerapro-black.woff') format('woff');
}

$primaryFont: 'Cera Pro';

$secondaryFont: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
	Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;

$fonts: (
	primary: $primaryFont,
	secondary: $secondaryFont,
);

@function font($fontName) {
	@return map-get($map: $fonts, $key: $fontName);
}

$sizes: (
	tiny: 0.6rem,
	small: 0.8rem,
	regular: 1rem,
	medium: 1.2rem,
	large: 1.4rem,
	h5: 1.6rem,
	h4: 1.8rem,
	h3: 2rem,
	h2: 2.2rem,
	h1: 2.4rem,
	huge: 2.6rem,
);

@function size($size) {
	@return map-get($map: $sizes, $key: $size);
}

$weights: (
	light: 300,
	regular: 400,
	medium: 500,
	bold: 600,
	black: 900,
);

@function weight($weight) {
	@return map-get($map: $weights, $key: $weight);
}
